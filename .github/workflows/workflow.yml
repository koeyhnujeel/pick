name: CI/CD Pipeline

on:
  push:
    branches:
      - "feature/**"
      - "main"

jobs:
  # 1. 빌드 & 테스트
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build and Test
        run: ./gradlew clean build -x test
        env:
          MYSQL_URL: ${{ secrets.MYSQL_URL }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_TOKEN_VALIDITY: ${{ secrets.JWT_ACCESS_TOKEN_VALIDITY }}
          JWT_REFRESH_TOKEN_VALIDITY: ${{ secrets.JWT_REFRESH_TOKEN_VALIDITY }}
          OBJECT_STORAGE_ACCESS_KEY: ${{ secrets.OBJECT_STORAGE_ACCESS_KEY }}
          OBJECT_STORAGE_SECRET_KEY: ${{ secrets.OBJECT_STORAGE_SECRET_KEY }}
          OBJECT_STORAGE_REGION: ${{ secrets.OBJECT_STORAGE_REGION }}
          OBJECT_STORAGE_ENDPOINT: ${{ secrets.OBJECT_STORAGE_ENDPOINT }}
          OBJECT_STORAGE_BUCKET_NAME: ${{ secrets.OBJECT_STORAGE_BUCKET_NAME }}
          IMAGE_MAIN_TEST: ${{ secrets.IMAGE_MAIN_TEST }}
          IMAGE_DETAIL_TEST: ${{ secrets.IMAGE_DETAIL_TEST }}

      - name: Create .env file
        run: |
          echo "MYSQL_URL=${{ secrets.MYSQL_URL }}" >> .env
          echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_ACCESS_TOKEN_VALIDITY=${{ secrets.JWT_ACCESS_TOKEN_VALIDITY }}" >> .env
          echo "JWT_REFRESH_TOKEN_VALIDITY=${{ secrets.JWT_REFRESH_TOKEN_VALIDITY }}" >> .env
          echo "OBJECT_STORAGE_ACCESS_KEY=${{ secrets.OBJECT_STORAGE_ACCESS_KEY }}" >> .env
          echo "OBJECT_STORAGE_SECRET_KEY=${{ secrets.OBJECT_STORAGE_SECRET_KEY }}" >> .env
          echo "OBJECT_STORAGE_REGION=${{ secrets.OBJECT_STORAGE_REGION }}" >> .env
          echo "OBJECT_STORAGE_ENDPOINT=${{ secrets.OBJECT_STORAGE_ENDPOINT }}" >> .env
          echo "OBJECT_STORAGE_BUCKET_NAME=${{ secrets.OBJECT_STORAGE_BUCKET_NAME }}" >> .env
          echo "IMAGE_MAIN_TEST=${{ secrets.IMAGE_MAIN_TEST }}" >> .env
          echo "IMAGE_DETAIL_TEST=${{ secrets.IMAGE_DETAIL_TEST }}" >> .env

  # 2. 도커 이미지 빌드 및 허브 푸시/main 브랜치에 푸시 됐을 때만
  build_image:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/pick-app:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/pick-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/pick-app:latest

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/pick-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/pick-app:latest

  # 3. 클라우드 배포/main 브랜치에 푸시 됐을 때만
  deploy_to_ncp:
    if: github.ref == 'refs/heads/main'
    needs: build_image
    runs-on: ubuntu-latest
  
    steps:
      - name: Start Redis
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.REDIS_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SERVER_SSH_KEY }}
          port: ${{ secrets.NCP_SERVER_PORT }}
          script: |
            sudo systemctl start redis
            
      - name: Start Nginx
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.NGINX_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SERVER_SSH_KEY }}
          port: ${{ secrets.NCP_SERVER_PORT }}
          script: |
            sudo systemctl start nginx

      - name: Deploy to Server 1
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.APP_SERVER_1_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SERVER_SSH_KEY }}
          port: ${{ secrets.NCP_SERVER_PORT }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/pick-app:latest
            docker stop pick-app || true
            docker rm pick-app || true
            docker run -d --name pick-app -p 8080:8080 \
                       --env-file .env \
                       -Dspring.profiles.active=prod \
                       ${{ secrets.DOCKER_USERNAME }}/pick-app:latest

      - name: Deploy to Server 2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.APP_SERVER_2_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SERVER_SSH_KEY }}
          port: ${{ secrets.NCP_SERVER_PORT }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/pick-app:latest
            docker stop pick-app || true
            docker rm pick-app || true
            docker run -d --name pick-app -p 8080:8080 \
                       --env-file .env \
                       -Dspring.profiles.active=prod \
                       ${{ secrets.DOCKER_USERNAME }}/pick-app:latest
